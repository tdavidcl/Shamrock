#!/usr/bin/env python3

import argparse
import os
import sys
import importlib


# Get current file path
cur_file = os.path.realpath(os.path.expanduser(__file__))

# Get project directory
abs_proj_dir = os.path.abspath(os.path.join(cur_file, "../.."))

# Get env directory
abs_env_dir = os.path.abspath(os.path.join(abs_proj_dir, "env"))

def get_machine_list():
    list_machines = {}

    import glob
    for i in glob.glob(abs_env_dir+"/machine/**/setup-env.py", recursive=True):

        path = os.path.relpath(i,abs_env_dir+"/machine").replace("/",".").replace(".setup-env.py","")
        mod = importlib.import_module("machine."+path+".setup-env")

        list_machines[path] = mod.NAME
    return list_machines


# Customer formatter required to print help message for "--" option.
class CustomHelpFormatter(argparse.HelpFormatter):
    def format_help(self):
        USAGESTR="usage: new-env [-h] --machine MACHINE --builddir BUILDDIR"
        original_help = super().format_help().replace(USAGESTR,USAGESTR+" -- (argument for the env)")

        machines = "\nEnvironment list :\n"
        list_machines = get_machine_list()
        klist = [k for k in list_machines.keys()]
        klist.sort()
        for k in klist:
            machines += "  " + "{:30s}".format(k) + " " + list_machines[k] + "\n"

        return original_help + "  --                   Everything after this"+ \
            " will be forwarded to the env. \n" + machines


if __name__ == "__main__":

    # https://stackoverflow.com/questions/77809386/how-to-capture-all-arguments-after-double-dash-using-argparse
    # Extract underlying ("--") args before argparse parsing
    for idx, arg in enumerate(sys.argv):
        if arg == "--":
            wrapper_program_args = sys.argv[1:idx]
            underlying_tool_args = sys.argv[idx + 1:]
            break
        else:
            wrapper_program_args = sys.argv[1:]
            underlying_tool_args = []

    parser = argparse.ArgumentParser(formatter_class=CustomHelpFormatter,description='Environment utility for Shamrock')

    parser.add_argument("--machine", action='store', required=True , help="machine assumed for the environment")
    parser.add_argument("--builddir", action='store', required=True , help="build directory to use")
    parser.add_argument("--type", action='store', default="release", help="build type to use")

    args = parser.parse_args(wrapper_program_args)
    args.underlying_tool_args = underlying_tool_args



    # Make everything in env importable by python
    sys.path.insert(0, abs_env_dir)

    # Load the machine file
    # TODO add check that the file exist
    importlib.invalidate_caches()
    mod = importlib.import_module("machine."+args.machine+".setup-env")
    mod.setup(
        argv = underlying_tool_args,
        builddir = os.path.abspath(os.path.expanduser(args.builddir)),
        shamrockdir = abs_proj_dir,
        buildtype = args.type
        )

